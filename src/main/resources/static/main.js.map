{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-monster/add-monster.component.css","webpack:///./src/app/add-monster/add-monster.component.html","webpack:///./src/app/add-monster/add-monster.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.module.ts","webpack:///./src/app/battle-scene/battle-scene.component.css","webpack:///./src/app/battle-scene/battle-scene.component.html","webpack:///./src/app/battle-scene/battle-scene.component.ts","webpack:///./src/app/model/fullmonster.model.ts","webpack:///./src/app/model/monster.model.ts","webpack:///./src/app/model/scene.model.ts","webpack:///./src/app/monster-service/monster.service.ts","webpack:///./src/app/monster-view/monster-view.component.css","webpack:///./src/app/monster-view/monster-view.component.html","webpack:///./src/app/monster-view/monster-view.component.ts","webpack:///./src/app/monster/monster.component.css","webpack:///./src/app/monster/monster.component.html","webpack:///./src/app/monster/monster.component.ts","webpack:///./src/app/scene-service/scene-service.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".success {\\r\\n    color: rgb(130, 196, 33);\\r\\n}\\r\\n\\r\\n.err {\\r\\n    color: red;\\r\\n}\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-auto\\\">\\n    <h2 class=\\\"text-center\\\">Add Monster</h2>\\n    <h3 class=\\\"err\\\">{{errorMessage}}</h3>\\n  <form class=\\\"col-md-4 col-md-offset-4\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name:</label>\\n      <input [(ngModel)]=\\\"monster.name\\\" name=\\\"name\\\" class=\\\"form-control\\\" id=\\\"name\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"challenge_rating\\\">Challenge Rating:</label>\\n    <input [(ngModel)]=\\\"monster.challenge_rating\\\" name=\\\"challenge_rating\\\" class=\\\"form-control\\\" id=\\\"challenge_rating\\\">\\n    </div>\\n    <button class=\\\"btn btn-success\\\" (click)=\\\"createMonster()\\\">Create</button>\\n    <h3 class=\\\"success\\\">{{succesMessage}}</h3>\\n  </form>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Monster } from '../model/monster.model';\nimport { MonsterService} from '../monster-service/monster.service';\n\n@Component({\n  selector: 'app-add-monster',\n  templateUrl: './add-monster.component.html',\n  styleUrls: ['./add-monster.component.css']\n})\nexport class AddMonsterComponent implements OnInit {\n\n  monster: Monster = new Monster();\n  succesMessage: string;\n  errorMessage: string;\n\n  constructor(private router: Router, private monsterService: MonsterService) { }\n\n  ngOnInit() {\n    this.clearMessages();\n  }\n\n  createMonster(): void {\n    this.clearMessages();\n    this.monsterService.createMonster(this.monster)\n      .subscribe( data => {\n        this.succesMessage = \"Monster created\";\n      },\n      err => {\n        if (err.status == 400) {\n          this.errorMessage = \"Error while creatuing monster\"\n        }\n      }\n    );\n  };\n\n  clearMessages(): void {\n    this.succesMessage = \"\";\n    this.errorMessage = \"\";\n  } \n\n}\n","module.exports = \".btn-space {\\r\\n    margin-right: 5px;\\r\\n}\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h1>\\n    DnD Helper\\n  </h1>\\n  <div style=\\\"text-align:left\\\">\\n  <a routerLink=\\\"/monsters\\\" class=\\\"btn btn-primary btn-lg btn-space\\\" role=\\\"button\\\">Monsters</a>\\n  <a routerLink=\\\"/battleGenerator\\\" class=\\\"btn btn-primary btn-lg btn-space\\\" role=\\\"button\\\">Battle Generator</a>\\n  <a routerLink=\\\"/addMonster\\\" class=\\\"btn btn-primary btn-lg btn-space\\\" role=\\\"button\\\">Add monster</a>\\n</div>\\n  <router-outlet></router-outlet>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\nimport { setTheme } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() {\n    setTheme('bs3'); \n  }\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MonsterComponent } from './monster/monster.component';\nimport { AppRoutingModule } from './app.routing.module';\nimport { MonsterService } from './monster-service/monster.service';\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { AddMonsterComponent } from './add-monster/add-monster.component';\nimport { MonsterViewComponent } from './monster-view/monster-view.component';\nimport { BattleSceneComponent } from './battle-scene/battle-scene.component';\nimport { SceneService } from './scene-service/scene-service.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MonsterComponent,\n    AddMonsterComponent,\n    MonsterViewComponent,\n    BattleSceneComponent    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [MonsterService, SceneService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { MonsterComponent } from './monster/monster.component';\r\nimport { AddMonsterComponent } from './add-monster/add-monster.component';\r\nimport { MonsterViewComponent } from './monster-view/monster-view.component';\r\nimport { BattleSceneComponent } from './battle-scene/battle-scene.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'monsters', component: MonsterComponent },\r\n  { path: 'addMonster', component: AddMonsterComponent },\r\n  { path: 'monster-view/:id', component: MonsterViewComponent },\r\n  { path: 'battleGenerator', component: BattleSceneComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class AppRoutingModule { }","module.exports = \".btn-space {\\r\\n    margin: 5px;\\r\\n}\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-4\\\"></div>\\n  <div class=\\\"form=group col-md-4\\\">\\n    <h2>Set party level:</h2>\\n    <input [(ngModel)]=\\\"level\\\" name=\\\"level\\\" class=\\\"form-control\\\" id=\\\"level\\\">\\n    <h2>Set party difficulty:</h2>\\n    <input [(ngModel)]=\\\"difficulty\\\" name=\\\"difficulty\\\" class=\\\"form-control\\\" id=\\\"difficulty\\\">\\n    <button class=\\\"btn btn-primary btn-space\\\" (click)=\\\"constructBattleScene()\\\">Generate</button>\\n  </div>\\n  <div class=\\\"col-md-4\\\"></div>\\n</div>\\n<div class=\\\"row\\\" style=\\\"text-align:left\\\">\\n  <div class=\\\"col-md-12\\\" *ngFor=\\\"let event of scene.events\\\">\\n    <h1>{{event.description}}</h1>\\n    <table class=\\\"table borderless\\\">\\n      <thead>\\n        <tr>\\n          <th><h2>Experience</h2></th>\\n          <th><h2>Reward</h2></th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td><h4>{{event.experience}}</h4></td>\\n          <td><h4>{{event.reward}}</h4></td>\\n        </tr>\\n      </tbody>\\n    </table>\\n\\n    <table class=\\\"table table-striped\\\">\\n        <thead>\\n            <tr>\\n                <th><h2>Name</h2></th>\\n                <th><h2>Challenge rating</h2></th>\\n            </tr>\\n        </thead>\\n        <tbody>\\n            <tr *ngFor=\\\"let monster of event.monsters\\\">\\n              <td><a routerLink=\\\"/monster-view/{{monster.id}}\\\" class=\\\"btn btn-success btn-lg btn-space\\\" role=\\\"button\\\">{{monster.name}}</a></td>\\n              <td><h3>{{monster.challenge_rating}}</h3></td>\\n            </tr>\\n          </tbody>\\n    </table>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Monster } from '../model/monster.model';\nimport { Scene } from '../model/scene.model';\nimport { SceneService } from '../scene-service/scene-service.service';\n\n@Component({\n  selector: 'app-battle-scene',\n  templateUrl: './battle-scene.component.html',\n  styleUrls: ['./battle-scene.component.css']\n})\nexport class BattleSceneComponent implements OnInit {\n\n  scene: Scene;\n  level: number;\n  difficulty: string;\n\n  constructor(private sceneService: SceneService) { }\n\n  ngOnInit() {\n    this.scene = new Scene();\n  }\n\n  constructBattleScene(){\n    this.sceneService.getBattleScene(this.level, this.difficulty).subscribe(data =>{\n      this.scene = data;\n    })\n  }\n\n}\n","import { Action } from './action.model'\r\n\r\nexport class FullMonster {\r\n    id: number;\r\n    name: String;\r\n    size: String;\r\n    type: String;\r\n    subtype: String;\r\n    alignment: String;\r\n    armor_class: number;\r\n    hit_points: number;\r\n    hit_dice: String;\r\n    speed: String;\r\n\r\n    strength: number;\r\n    dexterity: number;\r\n    constitution: number;\r\n    intelligence: number;\r\n    wisdom: number;\r\n    charisma: number;\r\n\r\n    strength_save: number;\r\n    dexterity_save: number;\r\n    constitution_save: number;\r\n    intelligence_save: number;\r\n    wisdom_save: number;\r\n    charisma_save: number;\r\n\r\n    damage_vulnerabilities: String;\r\n    damage_resistances: String;\r\n    damage_immunities: String;\r\n    condition_immunities: String;\r\n\r\n    challenge_rating: String;\r\n\r\n    history: number;\r\n    religion: number;\r\n    perception: number;\r\n    medicine: number;\r\n    stealth: number;\r\n    acrobatics: number;\r\n    athletics: number;\r\n    sleight_of_hands: number;\r\n    arcana: number;\r\n    investigation: number;\r\n    nature: number;\r\n    animal_handling: number;\r\n    insight: number;\r\n    survival: number;\r\n    deception: number;\r\n    intimidation: number;\r\n    persuasion: number;\r\n    performance: number;\r\n\r\n    senses: String;\r\n    languages: String;\r\n\r\n    special_abilities: Action[];\r\n    actions: Action[];\r\n    legendary_actions: Action[];\r\n    reactions: Action[];\r\n}","export class Monster {\r\n    id: Number;\r\n    name: String;\r\n    challenge_rating: String;\r\n}","import { Event } from './event.model'\r\n\r\nexport class Scene {\r\n    events: Event[];\r\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { Monster } from '../model/monster.model';\nimport { FullMonster } from '../model/fullmonster.model';\n\n@Injectable()\nexport class MonsterService {\n\n  constructor(private http: HttpClient) { }\n\n  private monsterUrl = '/api/monster';\n\n  public getMonstersCount(){\n    let count: number = 0;\n    this.http.get<number>(this.monsterUrl + \"/count\").subscribe(data => {\n      count = data\n    })\n    return count;\n  };\n\n  public getMonsters(pageSize: number, page: number){\n    let params = new HttpParams();\n    params = params.set(\"pageSize\", pageSize.toString());\n    params = params.set(\"page\", page.toString());\n    return this.http.get<Monster[]>(this.monsterUrl, {params}); \n  };\n\n  public getMonster(monster){\n    return this.http.get<Monster>(this.monsterUrl + \"/\" + monster.id);\n  };\n\n  public getMonsterByName(monster){\n    return this.http.get<Monster>(this.monsterUrl + \"/by/\" + monster.name);\n  };\n\n  public getFullMonster(id: number) {\n    return this.http.get<FullMonster>(this.monsterUrl + \"/\" + id);\n  };\n\n  public deleteMonster(monster) {\n    return this.http.delete(this.monsterUrl + \"/\" + monster.id);\n  };\n\n  public createMonster(monster) {\n    return this.http.post<Monster>(this.monsterUrl, monster);\n  };\n}\n","module.exports = \".img-wrap {\\r\\n    position: relative;\\r\\n  }\\r\\n  \\r\\n  .img-wrap h2 {\\r\\n    position: absolute;\\r\\n    left: 0;\\r\\n    bottom: 0;\\r\\n    top: 25px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .img-wrap-s {\\r\\n    position: relative;\\r\\n  }\\r\\n  \\r\\n  .img-wrap-s h2 {\\r\\n    position: absolute;\\r\\n    left: 0;\\r\\n    top: 0px;\\r\\n    width: 100%;\\r\\n  }\"","module.exports = \"<div style=\\\"text-align:left\\\">\\n  <a routerLink=\\\"/monsters\\\" class=\\\"btn btn-success btn-lg btn-space\\\" role=\\\"button\\\">Back</a>\\n</div>\\n<div style=\\\"text-align:left\\\">\\n    <table class=\\\"table\\\">\\n      <tr>\\n        <td><h1>{{monster.name}}</h1></td>\\n        <td><h2>CR : {{monster.challenge_rating}}</h2></td>\\n        <td><h2>{{monster.type}}</h2></td>\\n        <td><h2>{{monster.size}}</h2></td>\\n        <td><h2>{{monster.alignment}}</h2></td>\\n      </tr>\\n    </table>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-5\\\">\\n      <table>\\n        <tr>\\n          <td>\\n              <div class=\\\"img-wrap\\\" style=\\\"text-align:center\\\">\\t\\t\\n                  <img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/Ei-heart.svg/128px-Ei-heart.svg.png\\\" class=\\\"img-responsive\\\">\\n                  <h2>{{monster.hit_points}}</h2>\\n              </div>\\n          </td>\\n          <td>\\n              <div class=\\\"img-wrap-s\\\" style=\\\"text-align:center\\\">\\t\\t\\n                  <img src=\\\"http://icons.iconarchive.com/icons/icons8/ios7/64/Network-Shield-icon.png\\\" class=\\\"img-responsive\\\">\\n                  <h2>{{monster.armor_class}}</h2>\\n              </div>\\n          </td>\\n          <td>\\n              <h4>{{monster.speed}}</h4>\\n          </td>\\n        </tr>\\n      </table>\\n    </div>\\n    <div class=\\\"col-md-5\\\">\\n      <h2>Saves</h2>\\n      <table class=\\\"table\\\">\\n        <thead>\\n            <tr>\\n              <th><h3>SS</h3></th>\\n              <th><h3>DS</h3></th>\\n              <th><h3>CS</h3></th>\\n              <th><h3>IS</h3></th>\\n              <th><h3>WS</h3></th>\\n              <th><h3>ChS</h3></th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr>\\n              <th>{{monster.strength_save}}</th>\\n              <th>{{monster.dexterity_save}}</th>\\n              <th>{{monster.constitution_save}}</th>\\n              <th>{{monster.intelligence_save}}</th>\\n              <th>{{monster.wisdom_save}}</th>\\n              <th>{{monster.charisma_save}}</th>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\" *ngIf=\\\"monster.damage_vulnerabilities || monster.damage_resistances || monster.damage_immunities || monster.condition_immunities\\\">\\n    <h1>Ressistances and Immunities</h1>\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <tr>\\n          <th>Damage Vulnerabilities</th>\\n          <th>Damage Resistances</th>\\n          <th>Damage Immunities</th>\\n          <th>Condition Immunities</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n          <tr>\\n            <td>{{monster.damage_vulnerabilities}}</td>\\n            <td>{{monster.damage_resistances}}</td>\\n            <td>{{monster.damage_immunities}}</td>\\n            <td>{{monster.condition_immunities}}</td>\\n          </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <h1>Actions</h1>\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <tr>\\n          <th>Action</th>\\n          <th>Attack Bonus</th>\\n          <th>Damage Dice</th>\\n          <th>Damage Bonus</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tr *ngFor=\\\"let action of monster.actions\\\">\\n        <td>{{action.name}}</td>\\n        <td>{{action.attack_bonus}}</td>\\n        <td>{{action.damage_dice}}</td>\\n        <td>{{action.damage_bonus}}</td>\\n        <td>{{action.desc}}</td>\\n      </tr>\\n    </table>\\n  </div>\\n  <div class=\\\"row\\\" *ngIf=\\\"monster.reactions.length\\\">\\n    <h1>Reactions</h1>\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <tr>\\n          <th>Action</th>\\n          <th>Attack Bonus</th>\\n          <th>Damage Dice</th>\\n          <th>Damage Bonus</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tr *ngFor=\\\"let action of monster.reactions\\\">\\n        <td>{{action.name}}</td>\\n        <td>{{action.attack_bonus}}</td>\\n        <td>{{action.damage_dice}}</td>\\n        <td>{{action.damage_bonus}}</td>\\n        <td>{{action.desc}}</td>\\n      </tr>\\n    </table>\\n  </div>\\n  <div class=\\\"row\\\" *ngIf=\\\"monster.special_abilities.length\\\">\\n    <h1>Special Abilities</h1>\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <tr>\\n          <th>Action</th>\\n          <th>Attack Bonus</th>\\n          <th>Damage Dice</th>\\n          <th>Damage Bonus</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tr *ngFor=\\\"let action of monster.special_abilities\\\">\\n        <td>{{action.name}}</td>\\n        <td>{{action.attack_bonus}}</td>\\n        <td>{{action.damage_dice}}</td>\\n        <td>{{action.damage_bonus}}</td>\\n        <td>{{action.desc}}</td>\\n      </tr>\\n    </table>\\n  </div>\\n  <div class=\\\"row\\\" *ngIf=\\\"monster.legendary_actions.length\\\">\\n    <h1>Legendary Actions</h1>\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <tr>\\n          <th>Action</th>\\n          <th>Attack Bonus</th>\\n          <th>Damage Dice</th>\\n          <th>Damage Bonus</th>\\n          <th>Description</th>\\n        </tr>\\n      </thead>\\n      <tr *ngFor=\\\"let action of monster.legendary_actions\\\">\\n        <td>{{action.name}}</td>\\n        <td>{{action.attack_bonus}}</td>\\n        <td>{{action.damage_dice}}</td>\\n        <td>{{action.damage_bonus}}</td>\\n        <td>{{action.desc}}</td>\\n      </tr>\\n    </table>\\n  </div>\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\">\\n        <h1>Abilities</h1>\\n        <table class=\\\"table borderless\\\">\\n            <tr>\\n              <td><h2>Strength</h2></td>\\n              <td><h2>{{monster.strength}}</h2></td>\\n            </tr>\\n            <tr>\\n              <td><h2>Dexterity</h2></td>\\n              <td><h2>{{monster.dexterity}}</h2></td>\\n            </tr>\\n            <tr>\\n              <td><h2>Constitution</h2></td>\\n              <td><h2>{{monster.constitution}}</h2></td>\\n            </tr>\\n            <tr>\\n              <td><h2>Intelligence</h2></td>\\n              <td><h2>{{monster.intelligence}}</h2></td>\\n            </tr>\\n            <tr>\\n              <td><h2>Wisdom</h2></td>\\n              <td><h2>{{monster.wisdom}}</h2></td>\\n            </tr>\\n            <tr>\\n              <td><h2>Charisma</h2></td>\\n              <td><h2>{{monster.charisma}}</h2></td>\\n            </tr>\\n        </table>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <h1>Skills</h1>\\n        <table class=\\\"table borderless\\\">\\n          <tr *ngIf=\\\"monster.history != 0\\\">\\n            <td><h4>History</h4></td>\\n            <td><h4>{{monster.history}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.religion != 0\\\">\\n            <td><h4>Religion</h4></td>\\n            <td><h4>{{monster.religion}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.perception != 0\\\">\\n            <td><h4>Perception</h4></td>\\n            <td><h4>{{monster.perception}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.medicine != 0\\\">\\n            <td><h4>Medicine</h4></td>\\n            <td><h4>{{monster.medicine}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.stealth != 0\\\">\\n            <td><h4>Stealth</h4></td>\\n            <td><h4>{{monster.stealth}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.acrobatics != 0\\\">\\n            <td><h4>Acrobatics</h4></td>\\n            <td><h4>{{monster.acrobatics}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.athletics != 0\\\">\\n            <td><h4>Athletics</h4></td>\\n            <td><h4>{{monster.athletics}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.sleight_of_hands != 0\\\">\\n            <td><h4>Sleight of hands</h4></td>\\n            <td><h4>{{monster.sleight_of_hands}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.arcana != 0\\\">\\n            <td><h4>Arcana</h4></td>\\n            <td><h4>{{monster.arcana}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.investigation != 0\\\">\\n            <td><h4>Investigation</h4></td>\\n            <td><h4>{{monster.investigation}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.nature != 0\\\">\\n            <td><h4>Nature</h4></td>\\n            <td><h4>{{monster.nature}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.insight != 0\\\">\\n            <td><h4>Insight</h4></td>\\n            <td><h4>{{monster.insight}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.survival != 0\\\">\\n            <td><h4>Survival</h4></td>\\n            <td><h4>{{monster.survival}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.deception != 0\\\">\\n            <td><h4>Deception</h4></td>\\n            <td><h4>{{monster.deception}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.intimidation != 0\\\">\\n            <td><h4>Intimidation</h4></td>\\n            <td><h4>{{monster.intimidation}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.persuasion != 0\\\">\\n            <td><h4>Persuasion</h4></td>\\n            <td><h4>{{monster.persuasion}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.performance != 0\\\">\\n            <td><h4>Performance</h4></td>\\n            <td><h4>{{monster.performance}}</h4></td>\\n          </tr>\\n          <tr *ngIf=\\\"monster.animal_handling != 0\\\">\\n            <td><h4>Animal handling</h4></td>\\n            <td><h4>{{monster.animal_handling}}</h4></td>\\n          </tr>\\n        </table>\\n      </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <h1>Information</h1>\\n    <h2>Senses</h2>\\n    <h3>{{monster.senses}}</h3>\\n    <h2>Languages</h2>\\n    <h3>{{monster.languages}}</h3>\\n  </div>\\n  \\n</div>\"","import { Injectable } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Monster } from '../model/monster.model';\nimport { MonsterService } from '../monster-service/monster.service';\nimport { FullMonster } from 'src/app/model/fullmonster.model';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'app-monster-view',\n  templateUrl: './monster-view.component.html',\n  styleUrls: ['./monster-view.component.css']\n})\nexport class MonsterViewComponent implements OnInit {\n\n  monster: FullMonster;\n\n  constructor(private route: ActivatedRoute, private router: Router, private monsterService: MonsterService) { }\n\n  ngOnInit() {\n    this.monster = new FullMonster();\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.monsterService.getFullMonster(id).subscribe(data => {\n      this.monster = data;\n    })\n  }\n\n}\n","module.exports = \".err {\\r\\n    color: red;\\r\\n}\"","module.exports = \"<div class=\\\"row\\\"></div>\\n<div class=\\\"col-md-1\\\"></div>\\n<div class=\\\"col-md-auto\\\">\\n  <h2> Monster Details</h2>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"id\\\">Find monster by Name:</label>\\n    <h3 class=\\\"err\\\">{{errorText}}</h3>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-4\\\"></div>\\n      <div class=\\\"col-md-4\\\"><input [(ngModel)]=\\\"foundMonster.name\\\" name=\\\"name\\\" class=\\\"form-control\\\" id=\\\"name\\\"></div>\\n      <div class=\\\"col-md-4\\\"></div>\\n    </div>\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"findMonster()\\\"> Find</button>\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th class=\\\"hidden\\\">Id</th>\\n          <th><h2>Name</h2></th>\\n          <th><h2>Challenge rating</h2></th>\\n          <th><h2>Action</h2></th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td><a routerLink=\\\"/monster-view/{{foundMonster.id}}\\\" class=\\\"btn btn-success btn-lg btn-space\\\" role=\\\"button\\\">{{foundMonster.name}}</a></td>\\n          <td>{{foundMonster.challenge_rating}}</td>\\n          <td>\\n            <button class=\\\"btn btn-danger\\\" (click)=\\\"deleteMonster(foundMonster)\\\"> Delete Monster</button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr class=\\\"text-center\\\">\\n          <th><h2>Name</h2></th>\\n          <th><h2>Challenge rating</h2></th>\\n          <th><h2>Action</h2></th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let monster of monsters\\\">\\n        <td><a routerLink=\\\"/monster-view/{{monster.id}}\\\" class=\\\"btn btn-success btn-lg btn-space\\\" role=\\\"button\\\">{{monster.name}}</a></td>\\n        <td><h3>{{monster.challenge_rating}}</h3></td>\\n        <td>\\n          <button class=\\\"btn btn-danger\\\" (click)=\\\"deleteMonster(monster)\\\"> Delete Monster</button>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <nav>\\n    <ul class=\\\"pagination\\\">\\n      <li class=\\\"page-item\\\">\\n        <a class=\\\"page-link\\\" (click)=\\\"findMonsters(currentPage - 1)\\\" aria-label=\\\"Previous\\\">\\n          <span aria-hidden=\\\"true\\\">&laquo;</span>\\n          <span class=\\\"sr-only\\\">Previous</span>\\n        </a>\\n      </li>\\n      <li *ngFor=\\\"let page of pages\\\" class=\\\"page-item\\\">\\n        <a class=\\\"page-link\\\" (click)=\\\"findMonsters(page)\\\">{{page}}</a>\\n      </li>\\n      <li class=\\\"page-item\\\">\\n        <a class=\\\"page-link\\\" (click)=\\\"findMonsters(currentPage + 1)\\\" aria-label=\\\"Next\\\">\\n          <span aria-hidden=\\\"true\\\">&raquo;</span>\\n          <span class=\\\"sr-only\\\">Next</span>\\n        </a>\\n      </li>\\n    </ul>\\n  </nav>\\n</div>\\n<div class=\\\"col-md-1\\\"></div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Monster } from '../model/monster.model';\nimport { MonsterService } from '../monster-service/monster.service';\n\n@Component({\n  selector: 'app-monster',\n  templateUrl: './monster.component.html',\n  styleUrls: ['./monster.component.css']\n})\nexport class MonsterComponent implements OnInit {\n\n  monsterCount: number = 324;\n  currentPage: number = 0;\n  pages: number[] = [];\n  pageSize: number = 15;\n  foundMonster: Monster = new Monster();\n  monsters: Monster[];\n  errorText: string;\n\n  constructor(private router: Router, private monsterService: MonsterService) { }\n\n  ngOnInit() {\n    this.currentPage = 0;\n    for (let i: number = 0; i < this.monsterCount / this.pageSize; i++) {\n      this.pages.push(i + 1);\n    }\n    this.errorText = \"\";\n    this.monsterService.getMonsters(this.pageSize, this.currentPage).subscribe(\n      data => {\n        this.monsters = data;\n      }\n    );\n  }\n\n  findMonsters(page: number): void {\n    this.currentPage = page;\n    this.monsterCount = this.monsterService.getMonstersCount()\n    this.monsterService.getMonsters(this.pageSize, page - 1).subscribe(\n      data => {\n        this.monsters = data;\n      });\n  }\n\n  findMonster(): void {\n    this.errorText = \"\";\n    this.monsterService.getMonsterByName(this.foundMonster).subscribe(\n      data => {\n        this.foundMonster = data\n      },\n      err => {\n        if (err.status == 404) {\n          this.errorText = \"Monster with name \" + this.foundMonster.name + \" doesn't exist \" + err.status;\n        }\n      }\n    );\n  }\n\n\n  deleteMonster(monster: Monster): void {\n    this.errorText = \"\";\n    this.monsterService.deleteMonster(monster)\n      .subscribe(data => {\n        if (monster.id == this.foundMonster.id) {\n          this.foundMonster = new Monster();\n        }\n        this.monsters = this.monsters.filter(m => m !== monster);\n      },\n      err => {\n        if (err.status == 404) {\n          this.errorText = \"Monster with id \" + this.foundMonster.id + \" doesn't exist \" + err.status;\n        }\n      });\n\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Scene } from 'src/app/model/scene.model';\n\n@Injectable()\nexport class SceneService {\n\n  constructor(private http: HttpClient) { }\n\n  private scenerUrl = '/api/scene';\n\n  public getBattleScene(level: number, difficulty: string) {\n    let params = new HttpParams();\n    params = params.set(\"level\", level.toString());\n    params = params.set(\"difficulty\", difficulty.toString());\n    return this.http.get<Scene>(this.scenerUrl, {params});\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}